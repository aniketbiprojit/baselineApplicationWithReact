{"version":3,"sources":["scripts/App.jsx","serviceWorker.js","index.js"],"names":["App","state","camera","recordedBlobs","toggle","bind","fireCheck","document","getElementById","style","display","this","setState","addEventListener","processed","window","removeEventListener","displayVideo","superBuffer","Blob","type","video","createElement","setAttribute","classList","add","src","URL","createObjectURL","console","log","play","appendChild","Fragment","className","onClick","id","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yUA2EeA,G,wDAtEd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CAAEC,QAAQ,EAAMC,cAAe,IAC5C,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAJJ,E,gEAObE,SAASC,eAAe,QAAQC,MAAMC,QAAU,OAChDC,KAAKC,SAAS,CAAEV,QAAQ,IACRK,SAASC,eAAe,aAC9BK,iBAAiB,SAAUF,KAAKP,U,kCAI1C,IAAIU,EAAYP,SAASC,eAAe,cACd,IAAtBG,KAAKV,MAAMC,QACdY,EAAUD,iBAAiB,SAAUF,KAAKP,QAC1CW,OAAOD,UAAYA,GAEnBA,EAAUE,oBAAoB,SAAUL,KAAKP,U,+BAIrC,IAAD,QACkB,IAAtBO,KAAKV,MAAMC,QACdK,SAASC,eAAe,QAAQC,MAAMC,QAAU,OAChDH,SAASC,eAAe,eAAeC,MAAMC,QAAU,QACvDC,KAAKC,SAAS,CAAEV,QAAQ,IAAQ,kBAAM,EAAKI,iBAE3CC,SAASC,eAAe,QAAQC,MAAMC,QAAU,QAChDH,SAASC,eAAe,eAAeC,MAAMC,QAAU,OACvDC,KAAKC,SAAS,CAAEV,QAAQ,IAAS,WAChC,EAAKI,YACL,EAAKW,qB,qCAMP,IAAId,EAAgBY,OAAOZ,cAC3BQ,KAAKC,SAAS,CAAET,kBAChB,IAAMe,EAAc,IAAIC,KAAKhB,EAAe,CAAEiB,KAAM,eAChDC,EAAQd,SAASe,cAAc,SACnCD,EAAME,aAAa,WAAY,YAC/BF,EAAME,aAAa,SAAU,KAC7BF,EAAME,aAAa,QAAS,KAC5BF,EAAME,aAAa,UAAW,QAC9BF,EAAME,aAAa,OAAQ,QAE3BF,EAAMG,UAAUC,IAAI,aAEpBJ,EAAMK,IAAMX,OAAOY,IAAIC,gBAAgBV,GACvCW,QAAQC,IAAIT,GACZA,EAAMU,OACNxB,SAASC,eAAe,UAAUwB,YAAYX,K,+BAI9C,OACC,kBAAC,IAAMY,SAAP,KACC,yBAAKC,UAAU,OACd,4BAAQC,QAASxB,KAAKP,QAAtB,sBAED,yBAAK8B,UAAU,aAAaE,GAAG,WAC/B,gD,GAjEcC,IAAMC,YCQJC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDtC,SAASC,eAAe,SDuHnB,kBAAmBsC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.c6b29a13.chunk.js","sourcesContent":["import React from 'react'\n// import logo from '../assets/logo.svg'\nimport '../styles/App.scss'\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = { camera: true, recordedBlobs: [] }\n\t\tthis.toggle = this.toggle.bind(this)\n\t\tthis.fireCheck = this.fireCheck.bind(this)\n\t}\n\tcomponentDidMount() {\n\t\tdocument.getElementById('root').style.display = 'none'\n\t\tthis.setState({ camera: true })\n\t\tlet processed = document.getElementById('processed')\n\t\tprocessed.addEventListener('change', this.toggle)\n\t}\n\n\tfireCheck() {\n\t\tlet processed = document.getElementById('processed')\n\t\tif (this.state.camera === true) {\n\t\t\tprocessed.addEventListener('change', this.toggle)\n\t\t\twindow.processed = processed\n\t\t} else {\n\t\t\tprocessed.removeEventListener('change', this.toggle)\n\t\t}\n\t}\n\n\ttoggle() {\n\t\tif (this.state.camera === false) {\n\t\t\tdocument.getElementById('root').style.display = 'none'\n\t\t\tdocument.getElementById('application').style.display = 'block'\n\t\t\tthis.setState({ camera: true }, () => this.fireCheck())\n\t\t} else {\n\t\t\tdocument.getElementById('root').style.display = 'block'\n\t\t\tdocument.getElementById('application').style.display = 'none'\n\t\t\tthis.setState({ camera: false }, () => {\n\t\t\t\tthis.fireCheck()\n\t\t\t\tthis.displayVideo()\n\t\t\t})\n\t\t}\n\t}\n\n\tdisplayVideo() {\n\t\tlet recordedBlobs = window.recordedBlobs\n\t\tthis.setState({ recordedBlobs })\n\t\tconst superBuffer = new Blob(recordedBlobs, { type: 'video/webm' })\n\t\tlet video = document.createElement('video')\n\t\tvideo.setAttribute('controls', 'controls')\n\t\tvideo.setAttribute('height', 480)\n\t\tvideo.setAttribute('width', 640)\n\t\tvideo.setAttribute('preload', 'none')\n\t\tvideo.setAttribute('loop', 'loop')\n\n\t\tvideo.classList.add('add-video')\n\n\t\tvideo.src = window.URL.createObjectURL(superBuffer)\n\t\tconsole.log(video)\n\t\tvideo.play()\n\t\tdocument.getElementById('videos').appendChild(video)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className='App'>\n\t\t\t\t\t<button onClick={this.toggle}>Open Camera Tray.</button>\n\t\t\t\t</div>\n\t\t\t\t<div className='parent-div' id='videos'></div>\n\t\t\t\t<button>Publish</button>\n\t\t\t</React.Fragment>\n\t\t)\n\t}\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './main.css'\nimport './lucario.css'\nimport './styles/index.scss'\nimport App from './scripts/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}